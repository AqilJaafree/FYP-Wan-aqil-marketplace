{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/wanaqil/alchemyy-marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/wanaqil/alchemyy-marketplace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/wanaqil/alchemyy-marketplace/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import Navbar from\"./Navbar\";import axie from\"../tile.jpeg\";import{useLocation,useParams}from\"react-router-dom\";import MarketplaceJSON from\"../Marketplace.json\";import axios from\"axios\";import{useState}from\"react\";import{GetIpfsUrlFromPinata}from\"../utils\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function NFTPage(props){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),data=_useState2[0],updateData=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),dataFetched=_useState4[0],updateDataFetched=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],updateMessage=_useState6[1];var _useState7=useState(\"0x\"),_useState8=_slicedToArray(_useState7,2),currAddress=_useState8[0],updateCurrAddress=_useState8[1];function getNFTData(_x){return _getNFTData.apply(this,arguments);}function _getNFTData(){_getNFTData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(tokenId){var ethers,provider,signer,addr,contract,tokenURI,listedToken,meta,item;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:ethers=require(\"ethers\");//After adding your Hardhat network to your metamask, this code will get providers and signers\nprovider=new ethers.providers.Web3Provider(window.ethereum);signer=provider.getSigner();_context.next=5;return signer.getAddress();case 5:addr=_context.sent;//Pull the deployed contract instance\ncontract=new ethers.Contract(MarketplaceJSON.address,MarketplaceJSON.abi,signer);//create an NFT Token\n_context.next=9;return contract.tokenURI(tokenId);case 9:tokenURI=_context.sent;_context.next=12;return contract.getListedTokenForId(tokenId);case 12:listedToken=_context.sent;tokenURI=GetIpfsUrlFromPinata(tokenURI);_context.next=16;return axios.get(tokenURI);case 16:meta=_context.sent;meta=meta.data;console.log(listedToken);item={price:meta.price,tokenId:tokenId,seller:listedToken.seller,owner:listedToken.owner,image:meta.image,name:meta.name,description:meta.description};console.log(item);updateData(item);updateDataFetched(true);console.log(\"address\",addr);updateCurrAddress(addr);case 25:case\"end\":return _context.stop();}},_callee);}));return _getNFTData.apply(this,arguments);}function buyNFT(_x2){return _buyNFT.apply(this,arguments);}function _buyNFT(){_buyNFT=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tokenId){var ethers,provider,signer,contract,salePrice,transaction;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;ethers=require(\"ethers\");//After adding your Hardhat network to your metamask, this code will get providers and signers\nprovider=new ethers.providers.Web3Provider(window.ethereum);signer=provider.getSigner();//Pull the deployed contract instance\ncontract=new ethers.Contract(MarketplaceJSON.address,MarketplaceJSON.abi,signer);salePrice=ethers.utils.parseUnits(data.price,\"ether\");updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");//run the executeSale function\n_context2.next=9;return contract.executeSale(tokenId,{value:salePrice});case 9:transaction=_context2.sent;_context2.next=12;return transaction.wait();case 12:alert(\"You successfully bought the NFT!\");updateMessage(\"\");_context2.next=19;break;case 16:_context2.prev=16;_context2.t0=_context2[\"catch\"](0);alert(\"Upload Error\"+_context2.t0);case 19:case\"end\":return _context2.stop();}},_callee2,null,[[0,16]]);}));return _buyNFT.apply(this,arguments);}var params=useParams();var tokenId=params.tokenId;if(!dataFetched)getNFTData(tokenId);if(typeof data.image==\"string\")data.image=GetIpfsUrlFromPinata(data.image);return/*#__PURE__*/_jsxs(\"div\",{style:{\"min-height\":\"100vh\"},children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex ml-20 mt-20\",children:[/*#__PURE__*/_jsx(\"img\",{src:data.image,alt:\"\",className:\"w-2/5\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[\"Name: \",data.name]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Description: \",data.description]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Price: \",/*#__PURE__*/_jsx(\"span\",{className:\"\",children:data.price+\" ETH\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Owner: \",/*#__PURE__*/_jsx(\"span\",{className:\"text-sm\",children:data.owner})]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Seller: \",/*#__PURE__*/_jsx(\"span\",{className:\"text-sm\",children:data.seller})]}),/*#__PURE__*/_jsxs(\"div\",{children:[currAddress!=data.owner&&currAddress!=data.seller?/*#__PURE__*/_jsx(\"button\",{className:\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",onClick:function onClick(){return buyNFT(tokenId);},children:\"Buy this NFT\"}):/*#__PURE__*/_jsx(\"div\",{className:\"text-emerald-700\",children:\"You are the owner of this NFT\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-green text-center mt-3\",children:message})]})]})]})]});}","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","jsx","_jsx","jsxs","_jsxs","NFTPage","props","_useState","_useState2","_slicedToArray","data","updateData","_useState3","_useState4","dataFetched","updateDataFetched","_useState5","_useState6","message","updateMessage","_useState7","_useState8","currAddress","updateCurrAddress","getNFTData","_x","_getNFTData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tokenId","ethers","provider","signer","addr","contract","tokenURI","listedToken","meta","item","wrap","_callee$","_context","prev","next","require","providers","Web3Provider","window","ethereum","getSigner","getAddress","sent","Contract","address","abi","getListedTokenForId","get","console","log","price","seller","owner","image","name","description","stop","buyNFT","_x2","_buyNFT","_callee2","salePrice","transaction","_callee2$","_context2","utils","parseUnits","executeSale","value","wait","alert","t0","params","style","children","className","src","alt","onClick"],"sources":["C:/Users/wanaqil/alchemyy-marketplace/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\r\nimport axie from \"../tile.jpeg\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function NFTPage(props) {\r\n  const [data, updateData] = useState({});\r\n  const [dataFetched, updateDataFetched] = useState(false);\r\n  const [message, updateMessage] = useState(\"\");\r\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\r\n\r\n  async function getNFTData(tokenId) {\r\n    const ethers = require(\"ethers\");\r\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const addr = await signer.getAddress();\r\n    //Pull the deployed contract instance\r\n    let contract = new ethers.Contract(\r\n      MarketplaceJSON.address,\r\n      MarketplaceJSON.abi,\r\n      signer\r\n    );\r\n    //create an NFT Token\r\n    var tokenURI = await contract.tokenURI(tokenId);\r\n    const listedToken = await contract.getListedTokenForId(tokenId);\r\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n    let meta = await axios.get(tokenURI);\r\n    meta = meta.data;\r\n    console.log(listedToken);\r\n\r\n    let item = {\r\n      price: meta.price,\r\n      tokenId: tokenId,\r\n      seller: listedToken.seller,\r\n      owner: listedToken.owner,\r\n      image: meta.image,\r\n      name: meta.name,\r\n      description: meta.description,\r\n    };\r\n    console.log(item);\r\n    updateData(item);\r\n    updateDataFetched(true);\r\n    console.log(\"address\", addr);\r\n    updateCurrAddress(addr);\r\n  }\r\n\r\n  async function buyNFT(tokenId) {\r\n    try {\r\n      const ethers = require(\"ethers\");\r\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      //Pull the deployed contract instance\r\n      let contract = new ethers.Contract(\r\n        MarketplaceJSON.address,\r\n        MarketplaceJSON.abi,\r\n        signer\r\n      );\r\n      const salePrice = ethers.utils.parseUnits(data.price, \"ether\");\r\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");\r\n      //run the executeSale function\r\n      let transaction = await contract.executeSale(tokenId, {\r\n        value: salePrice,\r\n      });\r\n      await transaction.wait();\r\n\r\n      alert(\"You successfully bought the NFT!\");\r\n      updateMessage(\"\");\r\n    } catch (e) {\r\n      alert(\"Upload Error\" + e);\r\n    }\r\n  }\r\n\r\n  const params = useParams();\r\n  const tokenId = params.tokenId;\r\n  if (!dataFetched) getNFTData(tokenId);\r\n  if (typeof data.image == \"string\")\r\n    data.image = GetIpfsUrlFromPinata(data.image);\r\n\r\n  return (\r\n    <div style={{ \"min-height\": \"100vh\" }}>\r\n      <Navbar></Navbar>\r\n      <div className=\"flex ml-20 mt-20\">\r\n        <img src={data.image} alt=\"\" className=\"w-2/5\" />\r\n        <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\r\n          <div>Name: {data.name}</div>\r\n          <div>Description: {data.description}</div>\r\n          <div>\r\n            Price: <span className=\"\">{data.price + \" ETH\"}</span>\r\n          </div>\r\n          <div>\r\n            Owner: <span className=\"text-sm\">{data.owner}</span>\r\n          </div>\r\n          <div>\r\n            Seller: <span className=\"text-sm\">{data.seller}</span>\r\n          </div>\r\n          <div>\r\n            {currAddress != data.owner && currAddress != data.seller ? (\r\n              <button\r\n                className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\r\n                onClick={() => buyNFT(tokenId)}\r\n              >\r\n                Buy this NFT\r\n              </button>\r\n            ) : (\r\n              <div className=\"text-emerald-700\">\r\n                You are the owner of this NFT\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"text-green text-center mt-3\">{message}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}