{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/wanaqil/alchemyy-marketplace/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/wanaqil/alchemyy-marketplace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";//require('dotenv').config();\nvar key='6dba035bdbd1029e8743';var secret='ecae534215c3b5bbed2b1a8409683df0312fe74eac34436d48db593f3a6b7083';var axios=require('axios');var FormData=require('form-data');export var uploadJSONToIPFS=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(JSONBody){var url;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:url=\"https://api.pinata.cloud/pinning/pinJSONToIPFS\";//making axios POST request to Pinata ⬇️\nreturn _context.abrupt(\"return\",axios.post(url,JSONBody,{headers:{pinata_api_key:key,pinata_secret_api_key:secret}}).then(function(response){return{success:true,pinataURL:\"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash};}).catch(function(error){console.log(error);return{success:false,message:error.message};}));case 2:case\"end\":return _context.stop();}},_callee);}));return function uploadJSONToIPFS(_x){return _ref.apply(this,arguments);};}();export var uploadFileToIPFS=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(file){var url,data,metadata,pinataOptions;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:url=\"https://api.pinata.cloud/pinning/pinFileToIPFS\";//making axios POST request to Pinata ⬇️\ndata=new FormData();data.append('file',file);metadata=JSON.stringify({name:'testname',keyvalues:{exampleKey:'exampleValue'}});data.append('pinataMetadata',metadata);//pinataOptions are optional\npinataOptions=JSON.stringify({cidVersion:0,customPinPolicy:{regions:[{id:'FRA1',desiredReplicationCount:1},{id:'NYC1',desiredReplicationCount:2}]}});data.append('pinataOptions',pinataOptions);return _context2.abrupt(\"return\",axios.post(url,data,{maxBodyLength:'Infinity',headers:{'Content-Type':\"multipart/form-data; boundary=\".concat(data._boundary),pinata_api_key:key,pinata_secret_api_key:secret}}).then(function(response){console.log(\"image uploaded\",response.data.IpfsHash);return{success:true,pinataURL:\"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash};}).catch(function(error){console.log(error);return{success:false,message:error.message};}));case 8:case\"end\":return _context2.stop();}},_callee2);}));return function uploadFileToIPFS(_x2){return _ref2.apply(this,arguments);};}();","map":{"version":3,"names":["key","secret","axios","require","FormData","uploadJSONToIPFS","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","JSONBody","url","wrap","_callee$","_context","prev","next","abrupt","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataURL","data","IpfsHash","catch","error","console","log","message","stop","_x","apply","arguments","uploadFileToIPFS","_ref2","_callee2","file","metadata","pinataOptions","_callee2$","_context2","append","JSON","stringify","name","keyvalues","exampleKey","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","concat","_boundary","_x2"],"sources":["C:/Users/wanaqil/alchemyy-marketplace/src/pinata.js"],"sourcesContent":["//require('dotenv').config();\r\nconst key = '6dba035bdbd1029e8743';\r\nconst secret ='ecae534215c3b5bbed2b1a8409683df0312fe74eac34436d48db593f3a6b7083';\r\n\r\nconst axios = require('axios');\r\nconst FormData = require('form-data');\r\n\r\nexport const uploadJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios \r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n\r\n    });\r\n};\r\n\r\nexport const uploadFileToIPFS = async(file) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    \r\n    let data = new FormData();\r\n    data.append('file', file);\r\n\r\n    const metadata = JSON.stringify({\r\n        name: 'testname',\r\n        keyvalues: {\r\n            exampleKey: 'exampleValue'\r\n        }\r\n    });\r\n    data.append('pinataMetadata', metadata);\r\n\r\n    //pinataOptions are optional\r\n    const pinataOptions = JSON.stringify({\r\n        cidVersion: 0,\r\n        customPinPolicy: {\r\n            regions: [\r\n                {\r\n                    id: 'FRA1',\r\n                    desiredReplicationCount: 1\r\n                },\r\n                {\r\n                    id: 'NYC1',\r\n                    desiredReplicationCount: 2\r\n                }\r\n            ]\r\n        }\r\n    });\r\n    data.append('pinataOptions', pinataOptions);\r\n\r\n    return axios \r\n        .post(url, data, {\r\n            maxBodyLength: 'Infinity',\r\n            headers: {\r\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            console.log(\"image uploaded\", response.data.IpfsHash)\r\n            return {\r\n               success: true,\r\n               pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n\r\n    });\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}