{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wanaqil\\\\RTW3-Week7-NFT-Marketplace\\\\src\\\\components\\\\Marketplace.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Marketplace() {\n  _s();\n  const sampleData = [{\n    name: \"NFT#1\",\n    description: \"Alchemy's First NFT\",\n    website: \"http://axieinfinity.io\",\n    image: \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    price: \"0.03ETH\",\n    currentlySelling: \"True\",\n    address: \"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    name: \"NFT#2\",\n    description: \"Alchemy's Second NFT\",\n    website: \"http://axieinfinity.io\",\n    image: \"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\n    price: \"0.03ETH\",\n    currentlySelling: \"True\",\n    address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    name: \"NFT#3\",\n    description: \"Alchemy's Third NFT\",\n    website: \"http://axieinfinity.io\",\n    image: \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\n    price: \"0.03ETH\",\n    currentlySelling: \"True\",\n    address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }];\n  const [data, setData] = useState(sampleData);\n  const [dataFetched, setDataFetched] = useState(false);\n  useEffect(() => {\n    if (!dataFetched) getAllNFTs();\n  }, [dataFetched]);\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n    let transaction = await contract.getAllNFTs();\n    const items = await Promise.all(transaction.map(async i => {\n      if (i) {\n        let tokenURI = await contract.tokenURI(i.tokenId);\n        tokenURI = GetIpfsUrlFromPinata(tokenURI);\n        let meta;\n        try {\n          const response = await axios.get(tokenURI);\n          meta = response.data;\n        } catch (error) {\n          console.error(\"Error fetching metadata: \", error);\n        }\n        let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n        let item = {\n          price,\n          tokenId: i.tokenId.toNumber(),\n          seller: i.seller,\n          owner: i.owner,\n          image: meta.image,\n          name: meta.name,\n          description: meta.description\n        };\n        return item;\n      }\n    }));\n    setDataFetched(true);\n    setData(items);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: data && data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(Marketplace, \"ppiWAvl+wM6GEsJIRUe6WKEL0+0=\");\n_c = Marketplace;\nvar _c;\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["useEffect","Navbar","NFTTile","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","jsxDEV","_jsxDEV","Marketplace","_s","sampleData","name","description","website","image","price","currentlySelling","address","data","setData","dataFetched","setDataFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","abi","transaction","items","Promise","all","map","i","tokenURI","tokenId","meta","response","get","error","console","utils","formatUnits","toString","item","toNumber","seller","owner","children","fileName","_jsxFileName","lineNumber","columnNumber","className","value","index","_c","$RefreshReg$"],"sources":["C:/Users/wanaqil/RTW3-Week7-NFT-Marketplace/src/components/Marketplace.js"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nimport Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function Marketplace() {\r\n  const sampleData = [\r\n    {\r\n      name: \"NFT#1\",\r\n      description: \"Alchemy's First NFT\",\r\n      website: \"http://axieinfinity.io\",\r\n      image:\r\n        \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n      price: \"0.03ETH\",\r\n      currentlySelling: \"True\",\r\n      address: \"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\r\n    },\r\n    {\r\n      name: \"NFT#2\",\r\n      description: \"Alchemy's Second NFT\",\r\n      website: \"http://axieinfinity.io\",\r\n      image:\r\n        \"https://gateway.pinata.cloud/ipfs/QmdhoL9K8my2vi3fej97foiqGmJ389SMs55oC5EdkrxF2M\",\r\n      price: \"0.03ETH\",\r\n      currentlySelling: \"True\",\r\n      address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n    },\r\n    {\r\n      name: \"NFT#3\",\r\n      description: \"Alchemy's Third NFT\",\r\n      website: \"http://axieinfinity.io\",\r\n      image:\r\n        \"https://gateway.pinata.cloud/ipfs/QmTsRJX7r5gyubjkdmzFrKQhHv74p5wT9LdeF1m3RTqrE5\",\r\n      price: \"0.03ETH\",\r\n      currentlySelling: \"True\",\r\n      address: \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\r\n    },\r\n  ];\r\n  const [data, setData] = useState(sampleData);\r\n  const [dataFetched, setDataFetched] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!dataFetched) getAllNFTs();\r\n  }, [dataFetched]);\r\n\r\n  async function getAllNFTs() {\r\n    const ethers = require(\"ethers\");\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n\r\n    let contract = new ethers.Contract(\r\n      MarketplaceJSON.address,\r\n      MarketplaceJSON.abi,\r\n      signer\r\n    );\r\n\r\n    let transaction = await contract.getAllNFTs();\r\n\r\n    const items = await Promise.all(\r\n      transaction.map(async (i) => {\r\n        if (i) {\r\n          let tokenURI = await contract.tokenURI(i.tokenId);\r\n          tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n          let meta;\r\n\r\n          try {\r\n            const response = await axios.get(tokenURI);\r\n            meta = response.data;\r\n          } catch (error) {\r\n            console.error(\"Error fetching metadata: \", error);\r\n          }\r\n\r\n          let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\r\n\r\n          let item = {\r\n            price,\r\n            tokenId: i.tokenId.toNumber(),\r\n            seller: i.seller,\r\n            owner: i.owner,\r\n            image: meta.image,\r\n            name: meta.name,\r\n            description: meta.description,\r\n          };\r\n\r\n          return item;\r\n        }\r\n      })\r\n    );\r\n\r\n    setDataFetched(true);\r\n    setData(items);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar></Navbar>\r\n      <div className=\"flex flex-col place-items-center mt-20\">\r\n        <div className=\"md:text-xl font-bold text-white\">Top NFTs</div>\r\n        <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n          {data &&\r\n            data.map((value, index) => {\r\n              return <NFTTile data={value} key={index}></NFTTile>;\r\n            })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,eAAe,MAAM,qBAAqB;AACjD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,oBAAoB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAMC,UAAU,GAAG,CACjB;IACEC,IAAI,EAAE,OAAO;IACbC,WAAW,EAAE,qBAAqB;IAClCC,OAAO,EAAE,wBAAwB;IACjCC,KAAK,EACH,kFAAkF;IACpFC,KAAK,EAAE,SAAS;IAChBC,gBAAgB,EAAE,MAAM;IACxBC,OAAO,EAAE;EACX,CAAC,EACD;IACEN,IAAI,EAAE,OAAO;IACbC,WAAW,EAAE,sBAAsB;IACnCC,OAAO,EAAE,wBAAwB;IACjCC,KAAK,EACH,kFAAkF;IACpFC,KAAK,EAAE,SAAS;IAChBC,gBAAgB,EAAE,MAAM;IACxBC,OAAO,EAAE;EACX,CAAC,EACD;IACEN,IAAI,EAAE,OAAO;IACbC,WAAW,EAAE,qBAAqB;IAClCC,OAAO,EAAE,wBAAwB;IACjCC,KAAK,EACH,kFAAkF;IACpFC,KAAK,EAAE,SAAS;IAChBC,gBAAgB,EAAE,MAAM;IACxBC,OAAO,EAAE;EACX,CAAC,CACF;EACD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAACM,UAAU,CAAC;EAC5C,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAErDL,SAAS,CAAC,MAAM;IACd,IAAI,CAACqB,WAAW,EAAEE,UAAU,CAAC,CAAC;EAChC,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;EAEjB,eAAeE,UAAUA,CAAA,EAAG;IAC1B,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;IAChC,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;IACnE,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAS,CAAC,CAAC;IAEnC,IAAIC,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAQ,CAChC/B,eAAe,CAACe,OAAO,EACvBf,eAAe,CAACgC,GAAG,EACnBJ,MACF,CAAC;IAED,IAAIK,WAAW,GAAG,MAAMH,QAAQ,CAACV,UAAU,CAAC,CAAC;IAE7C,MAAMc,KAAK,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7BH,WAAW,CAACI,GAAG,CAAC,MAAOC,CAAC,IAAK;MAC3B,IAAIA,CAAC,EAAE;QACL,IAAIC,QAAQ,GAAG,MAAMT,QAAQ,CAACS,QAAQ,CAACD,CAAC,CAACE,OAAO,CAAC;QACjDD,QAAQ,GAAGpC,oBAAoB,CAACoC,QAAQ,CAAC;QACzC,IAAIE,IAAI;QAER,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMzC,KAAK,CAAC0C,GAAG,CAACJ,QAAQ,CAAC;UAC1CE,IAAI,GAAGC,QAAQ,CAAC1B,IAAI;QACtB,CAAC,CAAC,OAAO4B,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD;QAEA,IAAI/B,KAAK,GAAGQ,MAAM,CAACyB,KAAK,CAACC,WAAW,CAACT,CAAC,CAACzB,KAAK,CAACmC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC;QAEjE,IAAIC,IAAI,GAAG;UACTpC,KAAK;UACL2B,OAAO,EAAEF,CAAC,CAACE,OAAO,CAACU,QAAQ,CAAC,CAAC;UAC7BC,MAAM,EAAEb,CAAC,CAACa,MAAM;UAChBC,KAAK,EAAEd,CAAC,CAACc,KAAK;UACdxC,KAAK,EAAE6B,IAAI,CAAC7B,KAAK;UACjBH,IAAI,EAAEgC,IAAI,CAAChC,IAAI;UACfC,WAAW,EAAE+B,IAAI,CAAC/B;QACpB,CAAC;QAED,OAAOuC,IAAI;MACb;IACF,CAAC,CACH,CAAC;IAED9B,cAAc,CAAC,IAAI,CAAC;IACpBF,OAAO,CAACiB,KAAK,CAAC;EAChB;EAEA,oBACE7B,OAAA;IAAAgD,QAAA,gBACEhD,OAAA,CAACP,MAAM;MAAAwD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACjBpD,OAAA;MAAKqD,SAAS,EAAC,wCAAwC;MAAAL,QAAA,gBACrDhD,OAAA;QAAKqD,SAAS,EAAC,iCAAiC;QAAAL,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC/DpD,OAAA;QAAKqD,SAAS,EAAC,iEAAiE;QAAAL,QAAA,EAC7ErC,IAAI,IACHA,IAAI,CAACqB,GAAG,CAAC,CAACsB,KAAK,EAAEC,KAAK,KAAK;UACzB,oBAAOvD,OAAA,CAACN,OAAO;YAACiB,IAAI,EAAE2C;UAAM,GAAMC,KAAK;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC;QACrD,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClD,EAAA,CAtGuBD,WAAW;AAAAuD,EAAA,GAAXvD,WAAW;AAAA,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}