{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wanaqil\\\\alchemyy-marketplace\\\\src\\\\components\\\\Marketplace.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Marketplace() {\n  _s();\n  const [dataFetched, updateFetched] = useState(false);\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs();\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(transaction.map(async i => {\n      var tokenURI = await contract.tokenURI(i.tokenId);\n      console.log(\"getting this tokenUri\", tokenURI);\n      tokenURI = GetIpfsUrlFromPinata(tokenURI);\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n      let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description\n      };\n      return item;\n    }));\n    updateFetched(true);\n    updateData(items);\n  }\n  if (!dataFetched) getAllNFTs();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Marketplace, \"M8Zuej1HASHHWugkoovH+lBpduQ=\");\n_c = Marketplace;\nvar _c;\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["Navbar","NFTTile","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","jsxDEV","_jsxDEV","Marketplace","_s","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","items","Promise","all","map","i","tokenURI","tokenId","console","log","meta","get","data","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","updateData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","value","index","_c","$RefreshReg$"],"sources":["C:/Users/wanaqil/alchemyy-marketplace/src/components/Marketplace.js"],"sourcesContent":["import Navbar from \"./Navbar\";\r\nimport NFTTile from \"./NFTTile\";\r\nimport MarketplaceJSON from \"../Marketplace.json\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { GetIpfsUrlFromPinata } from \"../utils\";\r\n\r\nexport default function Marketplace() {\r\n\r\n\r\nconst [dataFetched, updateFetched] = useState(false);\r\n\r\nasync function getAllNFTs() {\r\n  const ethers = require(\"ethers\");\r\n  //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  //Pull the deployed contract instance\r\n  let contract = new ethers.Contract(\r\n    MarketplaceJSON.address,\r\n    MarketplaceJSON.abi,\r\n    signer\r\n  );\r\n  //create an NFT Token\r\n  let transaction = await contract.getAllNFTs();\r\n\r\n  //Fetch all the details of every NFT from the contract and display\r\n  const items = await Promise.all(\r\n    transaction.map(async (i) => {\r\n      var tokenURI = await contract.tokenURI(i.tokenId);\r\n      console.log(\"getting this tokenUri\", tokenURI);\r\n      tokenURI = GetIpfsUrlFromPinata(tokenURI);\r\n      let meta = await axios.get(tokenURI);\r\n      meta = meta.data;\r\n\r\n      let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\r\n      let item = {\r\n        price,\r\n        tokenId: i.tokenId.toNumber(),\r\n        seller: i.seller,\r\n        owner: i.owner,\r\n        image: meta.image,\r\n        name: meta.name,\r\n        description: meta.description,\r\n      };\r\n      return item;\r\n    })\r\n  );\r\n\r\n  updateFetched(true);\r\n  updateData(items);\r\n}\r\n\r\nif (!dataFetched) \r\ngetAllNFTs();\r\n\r\n\r\nreturn (\r\n    <div>\r\n        <Navbar></Navbar>\r\n        <div className=\"flex flex-col place-items-center mt-20\">\r\n            <div className=\"md:text-xl font-bold text-white\">\r\n                Top NFTs\r\n            </div>\r\n            <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\r\n                {data.map((value, index) => {\r\n                    return <NFTTile data={value} key={index}></NFTTile>;\r\n                })}\r\n            </div>\r\n        </div>            \r\n    </div>\r\n);\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}